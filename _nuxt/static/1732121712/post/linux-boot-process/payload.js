__NUXT_JSONP__("/post/linux-boot-process", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){return {data:[{post:{id:"ZgGQvxIAAGFJ1TlY",uid:"linux-boot-process",url:d,type:"post",href:"https:\u002F\u002Fblog-system76.cdn.prismic.io\u002Fapi\u002Fv2\u002Fdocuments\u002Fsearch?ref=Zz4UUx4AAEMAfDlE&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22ZgGQvxIAAGFJ1TlY%22%29+%5D%5D",tags:[],first_publication_date:n,last_publication_date:n,slugs:[],linked_documents:[],lang:"en-us",alternate_languages:[],data:{title:[{type:"heading1",text:k,spans:[],direction:a}],description:[{type:b,text:l,spans:[],direction:a}],image:{dimensions:{width:1600,height:800},alt:m,copyright:d,url:"https:\u002F\u002Fimages.prismic.io\u002Fblog-system76\u002FZgMkbscYqOFdyGUK_image-13-.png?auto=format%2Ccompress&rect=258%2C0%2C1014%2C507&w=1600&h=800",id:h,edit:{x:o,y:c,zoom:i,background:j}},date:"2024-03-27T18:00:00+0000",slices:[{variation:"full-width",version:p,items:[],primary:{image:{dimensions:{width:3840,height:1280},alt:m,copyright:d,url:"https:\u002F\u002Fimages.prismic.io\u002Fblog-system76\u002FZgMkbscYqOFdyGUK_image-13-.png?auto=format%2Ccompress&rect=4%2C0%2C1521%2C507&w=3840&h=1280",id:h,edit:{x:4,y:c,zoom:i,background:j},small:{dimensions:{width:768,height:512},alt:d,copyright:d,url:"https:\u002F\u002Fimages.prismic.io\u002Fblog-system76\u002FZgMkbscYqOFdyGUK_image-13-.png?auto=format%2Ccompress&rect=384%2C0%2C761%2C507&w=768&h=512",id:h,edit:{x:384,y:c,zoom:i,background:j}}},showAlt:false},id:"post_image$0a170ccf-f114-4ebe-bba5-871e4a5a2110",slice_type:"post_image",slice_label:d},{variation:"default-slice",version:p,items:[],primary:{text:[{type:b,text:"Feeling a little perplexed by how your computer goes from idle aluminum to a full-fledged modern device? You’re not alone! Let’s demystify the Linux boot process, breaking it down into its fundamental stages.",spans:[],direction:a},{type:e,text:"1. BIOS\u002FUEFI Initialization",spans:[{start:c,end:27,type:f}],direction:a},{type:b,text:"BIOS (Basic Input\u002FOutput System) or UEFI (Unified Extensible Firmware Interface) act as the bridge between the firmware and the operating system. When the computer is powered on, the BIOS\u002FUEFI performs a Power-On Self Test (POST) to check if the hardware components like RAM, disk drives, and other peripherals like your mouse are functioning correctly. After successful hardware verification, it searches for a bootable device, like a hard drive or USB drive.",spans:[],direction:a},{type:b,text:"System76 uses UEFI — the modern replacement of legacy BIOS — because it supports larger hard drives, faster boot times, and better security.",spans:[],direction:a},{type:e,text:"2. Bootloader",spans:[{start:c,end:13,type:f}],direction:a},{type:b,text:"The bootloader is the software responsible for loading the operating system. It does this by initializing the kernel by loading it into memory and passing control to it.",spans:[],direction:a},{type:b,text:"In Linux, the most common bootloader is called GNU GRand Unified Bootloader (GRUB). It supports features like a graphical menu, called the boot manager, to select different operating systems or kernel versions.",spans:[],direction:a},{type:b,text:"The bootloader in Pop!_OS is called systemd-boot, a UEFI boot manager that provides a kernel command line editor, as well as a text menu for selecting a boot entry. These boot entries can include a choice of operating system, kernel version, and a recovery partition. Systemd-boot is responsible for executing the EFI image residing on the EFI System Partition (ESP), then passing the heavy lifting off to the firmware.",spans:[],direction:a},{type:b,text:"Our Intel-powered laptops use Coreboot as a key component of System76 Open Firmware. Coreboot is open source, provides faster boot times, and allows for flexibility with the configuration. Coreboot’s boot process occurs in a series of stages and binaries, and performs the required hardware initialization.",spans:[],direction:a},{type:b,text:"Control is then passed to a different executable, referred to in coreboot as the “payload,” which is usually Tianocore. The primary function of the payload is to boot the operating system (OS). Coreboot initializes hardware, while the payload executes the software, combining together to provide a true open source boot option.",spans:[],direction:a},{type:b,text:"“We have much more granular control over Open Firmware. Before we were shipping Open Firmware on our hardware, the changes we could make to a device’s firmware were very limited and superficial,” explained Levi Portenier, QA Manager at System76. “Now, though, we can tailor our firmware to our hardware to create a cohesive experience.”",spans:[],direction:a},{type:e,text:"3. Kernel Initialization",spans:[{start:c,end:24,type:f}],direction:a},{type:b,text:"The kernel is the core of the Linux operating system. Once the bootloader hands over control, the kernel initializes its components and hardware devices: It sets up memory management, schedules processes, and mounts the root (admin) filesystem as read-only. Mounting the filesystem as read-only helps preserve the state of the system and prevents corruption to the boot process. This stage involves the execution of the initrd (initial ramdisk), a temporary filesystem loaded into memory, which includes drivers necessary to access the disk drives and other critical hardware.",spans:[],direction:a},{type:e,text:"4. Systemd",spans:[{start:c,end:q,type:f}],direction:a},{type:b,text:"Linux systems use an init (initialization) system to transition to user space and manage system processes. Systemd is the most widely adopted option. It is responsible for initializing the system services defined in the \u002Fetc\u002Fsystemd\u002Fsystem\u002F or \u002Fusr\u002Flib\u002Fsystemd\u002Fsystem\u002F directories. These services include sound servers, print servers, and network managers.",spans:[],direction:a},{type:b,text:"Systemd provides faster boot times and more control of services. It handles the mounting of filesystems, starting of system services, and the management of system states. Each Systemd unit can have a state of Active, Inactive or Loaded. A ‘unit’ is a systemd object that performs a particular task or action.",spans:[],direction:a},{type:e,text:"5. Targets",spans:[{start:c,end:q,type:f}],direction:a},{type:b,text:"Linux systems have targets that define the state of the system. Targets include multi-user modes, graphical modes, and rescue modes. Targets group units together allowing a single target to be used, and establishes a dependency and a standardized name for the synchronization points of the different units. Administrators can define which services start at each target to customize the system for specific needs.",spans:[],direction:a},{type:e,text:"6. Login",spans:[{start:c,end:8,type:f}],direction:a},{type:b,text:"Once all services are started, it’s time to log in to your server or desktop environment. That means the boot process is complete, and the login manager is ready for user interaction to start the desktop environment!",spans:[],direction:a},{type:b,text:"To sum up:",spans:[],direction:a},{type:g,text:"BIOS or UEFI initializes and verifies hardware components",spans:[],direction:a},{type:g,text:"Next, the bootloader loads the Linux kernel into memory",spans:[],direction:a},{type:g,text:"The kernel then uses a temporary filesystem containing drivers to access storage drives and other critical hardware",spans:[],direction:a},{type:g,text:"After that, the init system mounts the filesystem, and initializes the sound server, print server, and the network manager.",spans:[],direction:a},{type:g,text:"The system reaches a target, such as a multi-user mode when a system is shared across multiple users.",spans:[],direction:a},{type:g,text:"Boot was successful! Time to log in.",spans:[],direction:a},{type:b,text:"And that’s the Linux boot process, demystified. Something to think about after hitting the power button on your machine!",spans:[],direction:a}]},id:"post_copy$26e0a052-5ca8-41d7-b77d-59ce6d3689d5",slice_type:"post_copy",slice_label:d}],socialText:d,socialLinks:[{link:{}}],seoTitle:k,seoDescription:l,seoSocial:[{image:{dimensions:{width:1200,height:600},alt:m,copyright:d,url:"https:\u002F\u002Fimages.prismic.io\u002Fblog-system76\u002FZgMkbscYqOFdyGUK_image-13-.png?auto=format%2Ccompress&rect=258%2C0%2C1014%2C507&w=1200&h=600",id:h,edit:{x:o,y:c,zoom:i,background:j}},title:k,description:l}]}},_img:{}}],fetch:{},mutations:void 0}}("ltr","paragraph",0,null,"heading4","strong","list-item","ZgMkbscYqOFdyGUK",1,"transparent","\"Powering On\" Explained","Demystifying the Linux boot process.","Text that reads 'powering on explained: Demystifying the linux boot process with a power button icon behind it","2024-03-27T18:14:19+0000",258,"sktwi1xtmkfgx8626",10)));